# Generated by Django 3.0.11 on 2020-12-20 19:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0002_auto_20201205_1316'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('room', models.TextField(blank=True, verbose_name='Directions to meeting room or virtual link')),
                ('day', models.DateField(verbose_name='Date of meeting')),
                ('start', models.TimeField(verbose_name='Start time of the meeting')),
                ('length', models.IntegerField(verbose_name='Minutes that the meeting lasts')),
                ('message', models.TextField(default='', verbose_name='Notes to be included in email / text reminders')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Short title for each TaiChi Series', max_length=90, unique=True, verbose_name='Title for TaiChi Series')),
                ('slug', models.SlugField(default='Auto-generated', unique=True, verbose_name='Series address')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('visibility', models.CharField(choices=[('public', 'Show to public'), ('private', 'Do not show to public')], default='private', help_text='Control whether guests can see this series.', max_length=8)),
                ('membership', models.CharField(choices=[('open', 'Open to all'), ('invite', 'Leader must approve request to join'), ('closed', 'Leader must add members')], default='closed', help_text='Control how members are added to this series.', max_length=8)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Short title for each TaiChi Style', max_length=90, unique=True, verbose_name='Title for TaiChi Style')),
                ('slug', models.SlugField(default='Auto-generated', unique=True, verbose_name='Style address')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('wikipedia', models.URLField(blank=True, verbose_name='Wikipedia page.')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'style',
                'verbose_name_plural': 'styles',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SeriesMembers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('last_meeting', models.DateField(null=True, verbose_name='Last meeting attended')),
                ('paid_through', models.DateField(null=True, verbose_name='Paid up through')),
                ('since', models.DateField(auto_now_add=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='styles.Series')),
            ],
        ),
        migrations.CreateModel(
            name='SeriesLeaders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('since', models.DateField(auto_now_add=True)),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='styles.Series')),
            ],
        ),
        migrations.AddField(
            model_name='series',
            name='leaders',
            field=models.ManyToManyField(help_text='Leaders for the series. Can administer this series.', related_name='leaders', through='styles.SeriesLeaders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='series',
            name='members',
            field=models.ManyToManyField(help_text='Members of the series.', related_name='members', through='styles.SeriesMembers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='series',
            name='style',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='styles.Style'),
        ),
        migrations.CreateModel(
            name='MeetingAttendees',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=True)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='styles.Meeting')),
            ],
        ),
        migrations.AddField(
            model_name='meeting',
            name='attendees',
            field=models.ManyToManyField(help_text='List of attendees', related_name='attendees', through='styles.MeetingAttendees', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='leader',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='location',
            field=models.ForeignKey(help_text='Building where the meeting is held. Leave empty for virtual meetings.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.Location'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='series',
            field=models.ForeignKey(help_text='Series master for this meeting.', on_delete=django.db.models.deletion.CASCADE, to='styles.Series'),
        ),
    ]
